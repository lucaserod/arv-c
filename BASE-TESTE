
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TAM_NOME 100

typedef struct Aluno {
    int rgm;
    char nome[TAM_NOME];
} Aluno;

typedef struct No {
    Aluno dado;
    struct No *esq, *dir;
} No;

No* criarNo(int rgm, char nome[]) {
    No* novo = (No*)malloc(sizeof(No));
    novo->dado.rgm = rgm;
    strcpy(novo->dado.nome, nome);
    novo->esq = novo->dir = NULL;
    return novo;
}

No* inserir(No* raiz, int rgm, char nome[]) {
    if (raiz == NULL) {
        printf("Inserido: %d - %s\n", rgm, nome);
        return criarNo(rgm, nome);
    }

    if (rgm < raiz->dado.rgm)
        raiz->esq = inserir(raiz->esq, rgm, nome);
    else if (rgm > raiz->dado.rgm)
        raiz->dir = inserir(raiz->dir, rgm, nome);
    else
        printf("RGM ja existente: %d\n", rgm);

    return raiz;
}

No* encontrarMinimo(No* raiz) {
    while (raiz && raiz->esq)
        raiz = raiz->esq;
    return raiz;
}

No* remover(No* raiz, int rgm) {
    if (raiz == NULL) {
        printf("RGM nao encontrado.\n");
        return NULL;
    }

    if (rgm < raiz->dado.rgm)
        raiz->esq = remover(raiz->esq, rgm);
    else if (rgm > raiz->dado.rgm)
        raiz->dir = remover(raiz->dir, rgm);
    else {
        printf("Removido: %d - %s\n", raiz->dado.rgm, raiz->dado.nome);
        if (raiz->esq == NULL) {
            No* temp = raiz->dir;
            free(raiz);
            return temp;
        } else if (raiz->dir == NULL) {
            No* temp = raiz->esq;
            free(raiz);
            return temp;
        } else {
            No* temp = encontrarMinimo(raiz->dir);
            raiz->dado = temp->dado;
            raiz->dir = remover(raiz->dir, temp->dado.rgm);
        }
    }
    return raiz;
}

No* pesquisar(No* raiz, int rgm) {
    if (raiz == NULL)
        return NULL;
    if (rgm == raiz->dado.rgm)
        return raiz;
    if (rgm < raiz->dado.rgm)
        return pesquisar(raiz->esq, rgm);
    return pesquisar(raiz->dir, rgm);
}

void preOrdem(No* raiz) {
    if (raiz != NULL) {
        printf("%d - %s\n", raiz->dado.rgm, raiz->dado.nome);
        preOrdem(raiz->esq);
        preOrdem(raiz->dir);
    }
}

void inOrdem(No* raiz) {
    if (raiz != NULL) {
        inOrdem(raiz->esq);
        printf("%d - %s\n", raiz->dado.rgm, raiz->dado.nome);
        inOrdem(raiz->dir);
    }
}

void posOrdem(No* raiz) {
    if (raiz != NULL) {
        posOrdem(raiz->esq);
        posOrdem(raiz->dir);
        printf("%d - %s\n", raiz->dado.rgm, raiz->dado.nome);
    }
}

void esvaziar(No* raiz) {
    if (raiz != NULL) {
        esvaziar(raiz->esq);
        esvaziar(raiz->dir);
        free(raiz);
    }
}

No* carregarArquivo(char nomeArquivo[]) {
    FILE* arq = fopen(nomeArquivo, "r");
    if (arq == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return NULL;
    }

    No* raiz = NULL;
    int rgm;
    char nome[TAM_NOME];

    while (fscanf(arq, "%d %[^\n]", &rgm, nome) != EOF) {
        raiz = inserir(raiz, rgm, nome);
    }

    fclose(arq);
    return raiz;
}

void menu(char nomeAluno[]) {
    printf("\nALUNO: %s\n", nomeAluno);
    printf("DISCIPLINA: ESTRUTURA DE DADOS I\n");
    printf("PROFESSOR: WALACE BONFIM\n");

    printf("\nEDITOR DE ARVORE\n");
    printf("1 - INSERIR\n");
    printf("2 - REMOVER UM NO\n");
    printf("3 - PESQUISAR\n");
    printf("4 - ESVAZIAR A ARVORE\n");
    printf("5 - EXIBIR A ARVORE (PRE, IN ou POS)\n");
    printf("0 - SAIR\n");
    printf("DIGITE SUA OPCAO: ");
}

int main() {
    No* raiz = carregarArquivo("dados.txt");
    int opcao, rgm;
    char nome[TAM_NOME];
    char tipo[4];
    char alunoPesquisado[TAM_NOME];
    strcpy(alunoPesquisado, "Nenhum aluno pesquisado ainda");

    do {
        menu(alunoPesquisado);
        scanf("%d", &opcao);
        getchar(); // limpa buffer

        switch (opcao) {
            case 1: {
                printf("RGM: ");
                scanf("%d", &rgm);
                getchar();
                printf("Nome: ");
                fgets(nome, TAM_NOME, stdin);
                nome[strcspn(nome, "\n")] = 0;
                raiz = inserir(raiz, rgm, nome);
                break;
            }
            case 2: {
                printf("RGM a remover: ");
                scanf("%d", &rgm);
                raiz = remover(raiz, rgm);
                break;
            }
            case 3: {
                printf("RGM a pesquisar: ");
                scanf("%d", &rgm);
                No* resultado = pesquisar(raiz, rgm);
                if (resultado) {
                    printf("RGM encontrado:\n");
                    printf("RGM: %d\n", resultado->dado.rgm);
                    printf("Nome: %s\n", resultado->dado.nome);
                    strcpy(alunoPesquisado, resultado->dado.nome);
                } else {
                    printf("RGM nao encontrado.\n");
                    strcpy(alunoPesquisado, "Nenhum aluno pesquisado ainda");
                }
                break;
            }
            case 4: {
                esvaziar(raiz);
                raiz = NULL;
                printf("Arvore esvaziada.\n");
                break;
            }
            case 5: {
                printf("Digite o tipo (PRE, IN, POS): ");
                scanf("%s", tipo);
                if (strcmp(tipo, "PRE") == 0)
                    preOrdem(raiz);
                else if (strcmp(tipo, "IN") == 0)
                    inOrdem(raiz);
                else if (strcmp(tipo, "POS") == 0)
                    posOrdem(raiz);
                else
                    printf("Tipo invalido.\n");
                break;
            }
            case 0: {
                printf("Encerrando...\n");
                esvaziar(raiz);
                break;
            }
            default: {
                printf("Opcao invalida.\n");
                break;
            }
        }
    } while (opcao != 0);

    return 0;
}
